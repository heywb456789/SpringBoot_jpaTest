<?xml version="1.0" encoding="UTF-8" ?>
<!--60초 마다 설정 파일의 변경을 확인하여 변경시 갱신-->
<configuration scan="true" scanPeriod="60 seconds">

    <!--springProfile 태그를 사용하면 Logback 설정 파일에서 복수개의 프로파일을 설정할 수 있다.  -->
    <springProfile name="local">
        <property resource="logback-local.properties"/>
    </springProfile>
    <springProfile name ="dev">
        <property resource="logback-dev.properties"/>
    </springProfile>

    <!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.-->
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

    <!--log file path-->
    <property name ="LOG_PATH" value="${log.config.path}"/>

    <!--log file name-->
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    <!--err log file name-->
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    <!--pattern-->
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] -%msg%n"/>

    <!--
    %Logger{length} : Logger name을 축약할 수 있다. {length}는 최대 자리 수, ex)logger{35}
    %-5level : 로그 레벨, -5는 출력의 고정폭 값(5글자)
    %msg : - 로그 메시지 (=%message)
    ${PID:-} : 프로세스 아이디
    %d : 로그 기록시간
    %p : 로깅 레벨
    %F : 로깅이 발생한 프로그램 파일명
    %M : 로깅일 발생한 메소드의 명
    %l : 로깅이 발생한 호출지의 정보
    %L : 로깅이 발생한 호출지의 라인 수
    %thread : 현재 Thread 명
    %t : 로깅이 발생한 Thread 명
    %c : 로깅이 발생한 카테고리
    %C : 로깅이 발생한 클래스 명
    %m : 로그 메시지
    %n : 줄바꿈(new line)
    %% : %를 출력
    %r : 애플리케이션 시작 이후부터 로깅이 발생한 시점까지의 시간(ms)
    -->

    <!--console Appender-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--file Appender-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--파일경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

        <!--출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <!--Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--.gz, .zip 등을 넣으면 자동 일자별 로그파일 압축-->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--파일담 최고 용량 kb,mb,gb-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 재개-->
            <maxHistory>30</maxHistory>
            <!--<MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>-->
        </rollingPolicy>
    </appender>

    <!--에러의 경우 파일에 로그 처리-->
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--Rolling 정책-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--.gz, .zip 등을 넣으면 자동 일자별 로그파일 압축-->
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--파일당 최고 용량 kb, mg ,gb-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--일자별 로그파일 ㅊ최대 보관주기 (~일) , 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>
    <!-- root레벨 설정 -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </root>

    <!-- 특정패키지 로깅레벨 설정 -->
    <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </logger>

    <!--log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF"/>

    <!--커넥션 open close 이벤트를 로그로 남긴다.-->
    <logger name="jdbc.connection" level="OFF"/>

    <!--Sql 문만을 로그로 남기며 , preparedStatement 일 경우 관련된 argument 값으로 대체된 Sql 문이 보여진다.-->
    <logger name ="jdbc.sqlonly" level="OFF"/>

    <!--sql 문과 해당 SQL 을 실행시키는데 수행된 시간 정보를 포함한다-->
    <logger name ="jdbc.sqltiming" level="DEBUG"/>

    <!--ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다 -->
    <logger name="jdbc.audit" level="OFF"/>

    <!--ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성-->
    <logger name ="jdbc.resultset" level="OFF"/>

    <!--sql 결과 조회된 데이터의 table을 로그로 남긴다-->
    <logger name ="jdbc.resultsettable" level="OFF"/>

</configuration>